l'offset tiene conto anche di ritorni a capo, spazi e tab presenti tra la chiusura del tag e il testo...

newAnnotation prende una funzione callback, da chiamare passando l'array di djenius range come parametro
faccio tutto il calcolo in asincrono?

prova a fare un range e poi modificare il testo precedente a tale range, si adatta? Se si, sono a cavallo.
Sì, si adatta, ma solo se cambia la struttura DOM, se modifico il testo invece collassa.

controlla che normalize sia ricorsivo sul sottoalbero
si, è ricorsivo sul sottoalbero

magari durante la scrittura del commento fai dim di tutta la pagina, tranne il div per il commento e il commento stesso (eventualmente dagli anche dell'ombra)

colori:
dividi il colore pieno per il numero massimo di span che fanno overlap.
2 span -> ognuno ha il 50% (il massimo, ovvero quando ci sono due in overlap, è 100%)
3 span -> ognuno ha il 33% (con due in overlap 66%, con 3 il 99%)
e così via, anche se forse sarebbe meglio rapportare sul rimanente con un minimo di tipo 20%:
2 span -> il primo ha 60%, quelli sopra il 40%
3 span -> il primo ha 47%, quelli sopra il 27% (quindi uno da solo 47%, in due 74%, in tre 100%)
4 span -> il primo ha 40%, quelli sopra il 20% (uno da solo 40%, due 60%, tre 80%, quattro 100%)
[(100 - 20) / n = percentuale di quelli sopra, +20 = percentuale del primo]

c'è un metodo per ottenere il rettangolo che circonda una selezione/range, potrei usarlo per fare una roba tipo la riga che indica la selezione nella colonna a destra su Genius

se tieni il sistema id di una djeniusAnnotation come djeniusAnnotations.length() ricordati, quando ne rimuovi una, di scalare l'id di tutte le altre!  (lato server)

seleziona la prima lettera, poi seleziona la prima lettera e qualcosa di fuori dal div, si crea uno span vuoto prima della lettera.
Ora, non è un grosso problema, però se puoi risolverlo senza toccare niente... (mi sa che centra il normalize... no, in realtà no)
ci sono "CR LF TAB TAB" quindi non è vuoto...
potrei anche lasciare così, male non fa.

Always implement default functions, but leave the chance to set custom ones
(annotation new text (prompt), annotation text edit (prompt with old text), ...)
expose spanMouseEnterHandler and spanMouseLeaveHandler for custom chooseAnnotation_Handler?

<meta name="viewport" content="width=device-width, initial-scale=1">
(proper scaling on mobile)

user: ... or editable: ...(true, false)
public: ... or visibility: ...

TODO:

- Aggiungi metodo per escludere dei div dalla possibilità di essere selezionati (setDjeniusIgnore)

- wrappa la chiamata alla funzione all'interno di defer con una funzione anonima, che poi chiama accept con il valore di ritorno della funzione
  se non ha avuto errori, o chiama reject con l'errore. In tal modo l'utilizzatore di handler non deve chiamare accept/reject, ma solo tornare
  un valore (rende trasparente l'uso delle promise)
  NO! Così neghi la possibilità di asincronia nella funzione impostata come handler