Mantieni ben separati Creazione e Visualizzazione, poichè nel prodotto finale saranno divisi

Creazione:			(ignoro gli <input>? non ce n'è bisogno, lo fa già da solo)
Funzione che mi restituisce l'array dei blocchi di testo direttamente figli del div passato come parametro
suddividi il range in sottorange ("mini range") sui blocchi di testo direttamente figli del div, chiama ricorsivamente sui figli non nodi text
ora ho un array di "mini range" che hanno start e end giacenti nello stesso blocco text, ognuno con: path, start (index, offset) e end (index, offset)

Visualizzazione:	(i nested link sono illegali in HTML)
Scendo lungo il path nodo per nodo
Wrappa il "minirange" con uno span:
	- la classe dello span si occupa dell'evidenziatura e della trasformazione cursore in manina ("cursor: pointer")
	- magari uniforma il colore del testo ("color: ?") in modo che il link nel commento sia sottolineato ma non con colore diverso
		(per trovare il colore del testo, dato che potrebbe non essere nero, potresti aggiungere un nodo testo al padre dello span,
		recuperarne l'attributo "color" con JQuery e rimuoverlo. Poi assegni quel color allo span)
	
	- mouseenter: svuota l'href del link (non eliminarlo!, trasferiscilo in un nuovo attributo djenius_link);
	  aggiungi click event: compare un floating div con url del link e selezione azione (commento o link)
	- mouseleave: ripristina href, rimuovi click event


Aggiungi metodo per escludere dei div dalla possibilità di essere selezionati
setDjeniusIgnore

Aggiungi metodo per settare il colore della selezione
Aggiungi metodo per dare la possibilità di scegliere se cambiare colore del testo nella parte di link selezionata

l'offset tiene conto anche di ritorni a capo, spazi e tab presenti tra la chiusura del tag e il testo...

newAnnotation prende una funzione callback, da chiamare passando l'array di djenius range come parametro
faccio tutto il calcolo in asincrono?

prova a fare un range e poi modificare il testo precedente a tale range, si adatta? Se si, sono a cavallo.
Sì, si adatta, ma solo se cambia la struttura DOM, se modifico il testo invece collassa.

controlla che normalize sia ricorsivo sul sottoalbero
si, è ricorsivo sul sottoalbero

aggiungi colore ad highlightDjeniusRange

magari durante la scrittura del commento fai dim di tutta la pagina, tranne il div per il commento e il commento stesso (eventualmente dagli anche dell'ombra)

IMPORTANTI:
- gestione dei link interni ai range

colori:
dividi il colore pieno per il numero massimo di span che fanno overlap.
2 span -> ognuno ha il 50% (il massimo, ovvero quando ci sono due in overlap, è 100%)
3 span -> ognuno ha il 33% (con due in overlap 66%, con 3 il 99%)
e così via, anche se forse sarebbe meglio rapportare sul rimanente con un minimo di tipo 20%:
2 span -> il primo ha 60%, quelli sopra il 40%
3 span -> il primo ha 47%, quelli sopra il 27% (quindi uno da solo 47%, in due 74%, in tre 100%)
4 span -> il primo ha 40%, quelli sopra il 20% (uno da solo 40%, due 60%, tre 80%, quattro 100%)
[(100 - 20) / n = percentuale di quelli sopra, +20 = percentuale del primo]

c'è un metodo per ottenere il rettangolo che circonda una selezione/range, potrei usarlo per fare una roba tipo la riga che indica la selezione nella colonna a destra su Genius

se tieni il sistema id di una djeniusAnnotation come djeniusAnnotations.length() ricordati, quando ne rimuovi una, di scalare l'id di tutte le altre!  (lato server)

seleziona la prima lettera, poi seleziona la prima lettera e qualcosa di fuori dal div, si crea uno span vuoto prima della lettera.
Ora, non è un grosso problema, però se puoi risolverlo senza toccare niente... (mi sa che centra il normalize... no, in realtà no)
ci sono "CR LF TAB TAB" quindi non è vuoto...
potrei anche lasciare così, male non fa.